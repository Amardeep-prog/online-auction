import React, { useState, useEffect } from 'react';
import axios from '../../utils/axios';
import {
Â  Container, Typography, Box, Button, AppBar, Toolbar, IconButton,
Â  Grid, Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
Â  Paper, TextField, CircularProgress
} from '@mui/material';
import LogoutIcon from '@mui/icons-material/Logout';
import DeleteIcon from '@mui/icons-material/Delete';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../context/AuthContext';

const SellerDashboard = () => {
Â  const [auctions, setAuctions] = useState([]);
Â  const [newAuction, setNewAuction] = useState({
Â  Â  title: '',
Â  Â  description: '',
Â  Â  startingPrice: '',
Â  Â  endDate: '',
Â  Â  category: '',
Â  });
Â  const [images, setImages] = useState([]);
Â  const [imagePreviews, setImagePreviews] = useState([]);
Â  const [loading, setLoading] = useState(false);
Â  const navigate = useNavigate();
Â  const { logout } = useAuth();

Â  useEffect(() => {
Â  Â  const fetchAuctions = async () => {
Â  Â  Â  try {
Â  Â  Â  Â  const res = await axios.get('/auctions/user/me');
Â  Â  Â  Â  setAuctions(res.data.data || []);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error(error.response?.data || error.message);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchAuctions();
Â  }, []);

Â  const handleInputChange = (e) => {
Â  Â  setNewAuction({ ...newAuction, [e.target.name]: e.target.value });
Â  };

Â  const handleImageChange = (e) => {
Â  Â  const files = Array.from(e.target.files);
Â  Â  setImages(files);
Â  Â  const previews = files.map((file) => URL.createObjectURL(file));
Â  Â  setImagePreviews(previews);
Â  };

Â  const removeImage = (index) => {
Â  Â  const newImages = [...images];
Â  Â  const newPreviews = [...imagePreviews];
Â  Â  newImages.splice(index, 1);
Â  Â  newPreviews.splice(index, 1);
Â  Â  setImages(newImages);
Â  Â  setImagePreviews(newPreviews);
Â  };

Â  const handleCreateAuction = async (e) => {
Â  Â  e.preventDefault();
Â  Â  setLoading(true);
Â  Â  try {
Â  Â  Â  const auctionData = {
Â  Â  Â  Â  ...newAuction,
Â  Â  Â  Â  startingPrice: Number(newAuction.startingPrice),
Â  Â  Â  Â  category: newAuction.category.toLowerCase(), // ðŸŸ¢ Enforce lowercase
Â  Â  Â  };
Â  Â  Â  const res = await axios.post('/auctions', auctionData);

Â  Â  Â  if (images.length > 0) {
Â  Â  Â  Â  const formData = new FormData();
Â  Â  Â  Â  images.forEach((img) => formData.append('images', img));
Â  Â  Â  Â  await axios.put(`/auctions/${res.data.data._id}/images`, formData, {
Â  Â  Â  Â  Â  headers: { 'Content-Type': 'multipart/form-data' },
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  const updatedAuctions = await axios.get('/auctions/user/me');
Â  Â  Â  setAuctions(updatedAuctions.data.data || []);
Â  Â  Â  setNewAuction({ title: '', description: '', startingPrice: '', endDate: '', category: '' });
Â  Â  Â  setImages([]);
Â  Â  Â  setImagePreviews([]);
Â  Â  } catch (error) {
Â  Â  Â  alert('Failed to create auction: ' + (error.response?.data?.error || error.message));
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const handleEndAuction = async (auctionId) => {
Â  Â  try {
Â  Â  Â  await axios.put(`/api/seller/auctions/${auctionId}/end`);
Â  Â  Â  setAuctions((prev) =>
Â  Â  Â  Â  prev.map((auc) => (auc._id === auctionId ? { ...auc, status: 'ended' } : auc))
Â  Â  Â  );
Â  Â  } catch (error) {
Â  Â  Â  console.error(error.response?.data || error.message);
Â  Â  }
Â  };

Â  const handleLogout = () => {
Â  Â  logout();
Â  Â  navigate('/');
Â  };

Â  return (
Â  Â  <Container maxWidth="lg" sx={{ mt: 4, mb: 6 }}>
Â  Â  Â  <AppBar position="static">
Â  Â  Â  Â  <Toolbar>
Â  Â  Â  Â  Â  <Typography variant="h6" sx={{ flexGrow: 1 }}>Seller Dashboard</Typography>
Â  Â  Â  Â  Â  <IconButton color="inherit" onClick={handleLogout}>
Â  Â  Â  Â  Â  Â  <LogoutIcon />
Â  Â  Â  Â  Â  </IconButton>
Â  Â  Â  Â  </Toolbar>
Â  Â  Â  </AppBar>

Â  Â  Â  <Typography variant="h4" mt={3} mb={3} align="center" fontWeight="bold" color="primary">
Â  Â  Â  Â  Manage Your Auctions
Â  Â  Â  </Typography>

Â  Â  Â  <Paper elevation={4} sx={{ p: 4, mb: 6, borderRadius: 3, bgcolor: '#f9f9f9' }}>
Â  Â  Â  Â  <Typography variant="h5" mb={3} fontWeight="medium">Create New Auction</Typography>
Â  Â  Â  Â  <Box component="form" onSubmit={handleCreateAuction} noValidate>
Â  Â  Â  Â  Â  <Grid container spacing={3}>
Â  Â  Â  Â  Â  Â  <Grid item xs={12} md={6}>
Â  Â  Â  Â  Â  Â  Â  <TextField label="Title" name="title" value={newAuction.title} onChange={handleInputChange} fullWidth required margin="normal" />
Â  Â  Â  Â  Â  Â  Â  <TextField label="Starting Price" name="startingPrice" value={newAuction.startingPrice} onChange={handleInputChange} type="number" fullWidth required margin="normal" inputProps={{ min: 0 }} />
Â  Â  Â  Â  Â  Â  Â  <TextField label="End Date" name="endDate" value={newAuction.endDate} onChange={handleInputChange} type="datetime-local" InputLabelProps={{ shrink: true }} fullWidth required margin="normal" />
Â  Â  Â  Â  Â  Â  Â  <TextField
Â  Â  Â  Â  Â  Â  Â  Â  select
Â  Â  Â  Â  Â  Â  Â  Â  label="Category"
Â  Â  Â  Â  Â  Â  Â  Â  name="category"
Â  Â  Â  Â  Â  Â  Â  Â  value={newAuction.category}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleInputChange}
Â  Â  Â  Â  Â  Â  Â  Â  fullWidth
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  margin="normal"
Â  Â  Â  Â  Â  Â  Â  Â  SelectProps={{ native: true }}
Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  <option value="">Select a category</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="art">Art</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="electronics">Electronics</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="fashion">Fashion</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="home">Home</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="sports">Sports</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="collectibles">Collectibles</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="vehicles">Vehicles</option>
Â  Â  Â  Â  Â  Â  Â  Â  <option value="other">Other</option>
Â  Â  Â  Â  Â  Â  Â  </TextField>
Â  Â  Â  Â  Â  Â  </Grid>
Â  Â  Â  Â  Â  Â  <Grid item xs={12} md={6}>
Â  Â  Â  Â  Â  Â  Â  <TextField label="Description" name="description" value={newAuction.description} onChange={handleInputChange} fullWidth required margin="normal" multiline rows={6} />
Â  Â  Â  Â  Â  Â  Â  <Button variant="contained" component="label" sx={{ mt: 2 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Upload Images
Â  Â  Â  Â  Â  Â  Â  Â  <input type="file" hidden multiple accept="image/*" onChange={handleImageChange} />
Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  <Box mt={2} display="flex" gap={2} flexWrap="wrap">
Â  Â  Â  Â  Â  Â  Â  Â  {imagePreviews.map((src, i) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Box key={i} sx={{ position: 'relative', width: 100, height: 100, borderRadius: 2, overflow: 'hidden', boxShadow: 1 }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img src={src} alt={`preview-${i}`} style={{ width: '100%', height: '100%', objectFit: 'cover' }} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <IconButton size="small" onClick={() => removeImage(i)} sx={{ position: 'absolute', top: 0, right: 0, color: 'white', bgcolor: 'rgba(0,0,0,0.6)', '&:hover': { bgcolor: 'rgba(0,0,0,0.8)' } }}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <DeleteIcon fontSize="small" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </IconButton>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  </Box>
Â  Â  Â  Â  Â  Â  </Grid>
Â  Â  Â  Â  Â  </Grid>
Â  Â  Â  Â  Â  <Button type="submit" variant="contained" color="primary" size="large" sx={{ mt: 4, fontWeight: 'bold' }} disabled={loading}>
Â  Â  Â  Â  Â  Â  {loading ? <CircularProgress size={24} color="inherit" /> : 'Create Auction'}
Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  </Box>
Â  Â  Â  </Paper>

Â  Â  Â  <Typography variant="h5" mb={2} fontWeight="medium">My Auctions</Typography>
Â  Â  Â  <TableContainer component={Paper} elevation={3} sx={{ borderRadius: 3 }}>
Â  Â  Â  Â  <Table>
Â  Â  Â  Â  Â  <TableHead sx={{ bgcolor: 'primary.main' }}>
Â  Â  Â  Â  Â  Â  <TableRow>
Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Title</TableCell>
Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Current Price</TableCell>
Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>End Date</TableCell>
Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Status</TableCell>
Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Actions</TableCell>
Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  </TableHead>
Â  Â  Â  Â  Â  <TableBody>
Â  Â  Â  Â  Â  Â  {auctions.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  <TableRow>
Â  Â  Â  Â  Â  Â  Â  Â  <TableCell colSpan={5} align="center">No auctions created yet.</TableCell>
Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  auctions.map((auction) => (
Â  Â  Â  Â  Â  Â  Â  Â  <TableRow key={auction._id} hover>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button onClick={() => navigate(`/auctions/${auction._id}`)} color="primary">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {auction.title}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>${auction.currentPrice || auction.startingPrice}</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>{new Date(auction.endDate).toLocaleString()}</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell sx={{ textTransform: 'capitalize' }}>{auction.status}</TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {auction.status === 'active' && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="contained" color="secondary" onClick={() => handleEndAuction(auction._id)}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  End Auction
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </TableCell>
Â  Â  Â  Â  Â  Â  Â  Â  </TableRow>
Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </TableBody>
Â  Â  Â  Â  </Table>
Â  Â  Â  </TableContainer>
Â  Â  </Container>
Â  );
};

export default SellerDashboard;
